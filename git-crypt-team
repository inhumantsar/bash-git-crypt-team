#!/bin/bash

# constants
COMMIT_PREFIX="git-crypt rekey"
CONFIG_PATH=".git-crypt-team"
BACKUP_PATH="${CONFIG_PATH}/backup"
BRANCH="rekey-git-crypt-$(date +%Y%m%d%H%M)"
ENC_FILE="${BACKUP_PATH}/encfiles"
TEAM_FILE="${CONFIG_PATH}/teamfile"
TMP_TEAM_FILE_PREFIX="${CONFIG_PATH}/tmp-teamfile"
TMP_TEAM_FILE="${TMP_TEAM_FILE_PREFIX}-$(date +%Y%m%d%H%M%S)"
URL_FILE="${CONFIG_PATH}/url"

# init
[ ! -d "${CONFIG_PATH}" ] && mkdir "${CONFIG_PATH}"
[ -f "${CONFIG_PATH}/url" ] && url="$(cat ${URL_FILE})"  || url=""
rm $CONFIG_PATH/teamfile-* &> /dev/null
preserve=0
skipgit=0
force=0
action="view"

# freak out and die if anything exits non-zero
set -e

usage() {
  echo "$0 -v|e|r|n [-h] [-u S3 url] [-s] [-p] [-f]"
  echo ""
  echo "Rekey git-crypt'd repo with a userlist stored in S3"
  echo ""
  echo "Operations - defaults to -v"
  echo "  -v    - Download and view the latest team list, then exit."
  echo "  -e    - Download and edit the team list, optionally upload changes to S3, then exit."
  echo "  -r    - Rekey the repo using the latest team list from S3."
  echo "  -n    - Key a new repo using the latest team list from S3."
  echo ""
  echo "Options"
  echo "  -f    - Force the rekey operation"
  echo "  -p    - Preserve unencrypted backups. Only valid with -r"
  echo "  -s    - Skip remote git operations (ie: push & pull)."
  echo "  -u    - S3 URL for the team list. eg: s3://somebucket/somepath/somefile.json Only required on first run."
  echo "  -h    - Print this help and exit."
}

heading() { echo -e "\n--------------------------------------\n-- $@"; }
gitcommit() { git add . && git commit -am "${COMMIT_PREFIX}: $@"; }

get_team_file() {
  heading "Getting latest team file from ${url}..."
  aws s3 cp "${url}" "${TMP_TEAM_FILE}"
  echo "${url}" > "${URL_FILE}"
}

view_team_file() { get_team_file && (cat "${TMP_TEAM_FILE}" | jq '.'); }

find_editor() {
	if [ "$EDITOR" != "" ]; then
		GCT_EDITOR="$EDITOR"
		return
	fi

	# note my bias, love my bias.
	common=("/usr/bin/vi" "/usr/bin/vim" "/usr/bin/nano" "/usr/bin/gedit" "/usr/bin/atom")
	for path in $common; do
	  if [ -f /usr/bin/vi ]; then
  	  GCT_EDITOR="${path}"
			return
		fi
	done
}

edit_team_file() {
  set +e
  get_team_file || echo "WARNING: No remote file found, creating a new one."
  set -e

  heading "Passing file to editor..."
  find_editor
  if [ "$GCT_EDITOR" == "" ]; then
    echo 'ERROR: No text editor found'
    return
  fi
  $GCT_EDITOR "${TMP_TEAM_FILE}"

  heading "Checking syntax..."

  set +e
  until jq '.' "${TMP_TEAM_FILE}" > /dev/null; do
    echo -n "Re-edit? [Yn] " && read yn
    if [ $(echo "${yn}" | grep -i "Y") ] || [ "${yn}" == "" ]; then
      vim "${TMP_TEAM_FILE}"
    else
      echo "ERROR: JSON is bad but user won't re-edit. Have to bail out."
      return
    fi
  done
  set -e

  heading "Changes will be lost if not uploaded."
  echo -n "Upload? [Ny] " && read yn
  if [ $(echo "${yn}" | grep -i "Y") ]; then
    heading "Uploading..."
    aws s3 cp "${TMP_TEAM_FILE}" "${url}"
    mv "${TMP_TEAM_FILE}" "${TEAM_FILE}"
  fi
}

rekey() {
  # find all git-crypt directories, bail if there are none
  gc_dirs=()
  while IFS=  read -r -d $'\0'; do
      gc_dirs+=("$REPLY")
  done < <(find . -type d -name "*git-crypt" -print0)
  if [ ${#gc_dirs[@]} -lt 1 ]; then
    echo "ERROR: No git-crypt directory found. Perhaps you meant to use `-n`?"
    return
  fi

	# find text editor
	find_editor
	if [ "$GCT_EDITOR" == "" ]; then
		echo "ERROR: Unable to find a known text editor. You don't use emacs, do you? ;)"
		return
	fi

  heading "Ensuring repo is unlocked..."
  git-crypt unlock

  heading "Cutting a fresh branch to work with..."
  git checkout -b $BRANCH

  # check for changes, commit them if necessary
  git update-index -q --refresh
  if [ ! -z "$(git diff-index --name-only HEAD --)" ]; then
    heading "Committing changes..."
    git commit -am 'git-crypt-team rekey: pre-flight commit'
  fi

  get_team_file

  heading "Checking new team file..."
  # basic jq parse check
  newteamfile="$(cat ${TMP_TEAM_FILE} | jq '.[] | .key' | sort | sed -e 's/\"//g')"
  echo "Found team: ${newteamfile}"
  echo "Done!"

  heading "Importing GPG keys..."
  gpg --recv-keys $newteamfile

  heading "Signing GPG keys..."
  for k in $newteamfile; do
    gpg --sign-key $k
  done

  # back up encrypted files and remove them
  heading "Backing up and removing decrypted secure files..."
  grep -q -F "${BACKUP_PATH}/" .gitignore || \
    (echo "${BACKUP_PATH}/" >> .gitignore && echo "Added backup path to .gitignore")
  mkdir -p "${BACKUP_PATH}"
  git-crypt status | grep -v 'not encrypted' | cut -c 16-80 > $ENC_FILE
  for f in `cat $ENC_FILE`; do
    echo -n "      $(pwd)/${f} -> ${BACKUP_PATH}/${f}..."
    cp -R "$(pwd)/${f}" "${BACKUP_PATH}/${f}" && rm "$(pwd)/${f}"
    echo "ok"
  done

  heading "Committing changes..."
  gitcommit "removing encrypted files"

  heading "Clearing git-crypt configuration..."
  for d in $gc_dirs; do
    rm -rf $d
  done

  heading "Committing changes..."
  gitcommit "clearing git-crypt configuration"

  heading "Copying decrypted secure files back into repo..."
  for f in `cat $ENC_FILE`; do
    echo -n "      ${BACKUP_PATH}/${f} -> $(pwd)/${f}..."
    cp -R "${BACKUP_PATH}/${f}" "$(pwd)/${f}"
    echo "ok"
  done

  heading "Re-initializing git-crypt..."
  git-crypt init || echo "Seems ok maybe?"

  heading "Re-adding team to git-crypt..."
  git-crypt add-gpg-user $newteamfile

  heading "Replacing local team file..."
  mv "${TMP_TEAM_FILE}" "${TEAM_FILE}"

  heading "Committing final changes and pushing branch..."
  gitcommit "finished"
  ([ $skipgit -eq 0 ] && git push -u origin "${BRANCH}") || echo "Skipping push."

}

new() {
  heading "Confirming there are no encrypted files currently..."
  (git-crypt status | grep -v 'not encrypted') && (echo "ERROR: There are encrypted files according to git-crypt, please use `-r` or remove them manually." \
    && exit 1) || echo 'All good!'

  heading "Initializing git-crypt..."
  git-crypt init

  get_team_file

  heading "Checking new team file..."
  # basic jq parse check
  (cat ${TMP_TEAM_FILE} | jq '.' 1> /dev/null) && echo "Passed parser checks." || (echo "ERROR: New team file fails JSON syntax check!" \
    && exit 1)
  newteamfile="$(cat ${TMP_TEAM_FILE} | jq '.[] | .key' | sort | sed -e 's/\"//g')"
  echo "Found team: ${newteamfile}"
  echo "Done!"

  heading "Importing GPG keys..."
  gpg --recv-keys $newteamfile

  heading "Signing GPG keys..."
  for k in $newteamfile; do
    gpg --sign-key $k
  done

  heading "Pulling latest master branch..."
  ([ $skipgit -eq 0 ] && git checkout master && git pull) || echo 'Skipping checkout and pull.'

  heading "Cutting a fresh branch to work with..."
  git checkout -b $BRANCH

  heading "Adding team to git-crypt..."
  git-crypt add-gpg-user $newteamfile

  heading "Creating local team file..."
  mv "${TMP_TEAM_FILE}" "${TEAM_FILE}"

  heading "Committing final changes and pushing branch..."
  gitcommit "Encryption initialized"
  ([ $skipgit -eq 0 ] && git push -u origin "${BRANCH}") || echo "Skipping push."
}

# parse args
OPTIND=1
while getopts "hu:psfvern" opt; do
    case "$opt" in
    h)  usage
        exit 0
        ;;
    u)  url=$OPTARG
        ;;
    p)  preserve=1
        ;;
    s)  skipgit=1
        ;;
    f)  force=1
        ;;
    v)  action="view"
        ;;
    e)  action="edit"
        ;;
    r)  action="rekey"
        ;;
    n)  action="new"
        ;;
    \:) exit 1
        ;;
    \?) exit 1
        ;;
    esac
done

# set up $@ to contain whatever wasn't parsed with getopts
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# pre-flight checks
if [ "${url}" == "" ]; then
  echo -e "ERROR: No URL passed or stored in config. Use -u.\n"
  usage
  exit 1
fi

aws --version || (echo "ERROR: aws-cli not installed! Try sudo pip install awscli" && exit 1)
jq --version || (echo "ERROR: jq not installed! Try yum/apt install jq" && exit 1)

echo "Starting git-crypt-team at $(date)"

# do the thing
[ "${action}" == "view" ] && view_team_file
[ "${action}" == "edit" ] && edit_team_file
[ "${action}" == "rekey" ] && rekey
[ "${action}" == "new" ] && new

if [ $preserve -eq 0 ]; then
  heading "Removing unencrypted backups and temp files..."
  rm -rvf "${BACKUP_PATH}/*"
  rm -rvf $TMP_TEAM_FILE_PREFIX-*
fi


set +e
exit 0
